datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  attendedEvents      Event[]      @relation(name: "attendedEvents")
  avatar              String?
  createdAt           DateTime     @default(now())
  email               String       @unique
  id                  String       @id @default(cuid())
  ownedEvents         Event[]      @relation(name: "ownedEvents")
  password            String
  receivedInvitations Invitation[] @relation(name: "receivedInvitations")
  roles               Json
  sentInvitations     Invitation[] @relation(name: "sender")
  trips               Trip[]
  updatedAt           DateTime     @updatedAt
  username            String       @unique
}

model Place {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime @default(now())
  events     Event[]
  id         String   @id @default(cuid())
  name       String
  price      Float
  rating     Int
  updatedAt  DateTime @updatedAt
  uri        String?
}

model Category {
  createdAt DateTime @default(now())
  events    Event[]
  icon      String
  id        String   @id @default(cuid())
  name      String
  places    Place[]
  updatedAt DateTime @updatedAt
}

model Event {
  attendees   User[]              @relation(name: "attendedEvents")
  category    Category            @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime            @default(now())
  date        DateTime
  description String?
  id          String              @id @default(cuid())
  invitations Invitation[]
  limit       Int
  owner       User                @relation(name: "ownedEvents", fields: [ownerId], references: [id])
  ownerId     String
  place       Place?              @relation(fields: [placeId], references: [id])
  placeId     String?
  title       String
  updatedAt   DateTime            @updatedAt
  visibility  EnumEventVisibility
}

model Invitation {
  createdAt   DateTime           @default(now())
  event       Event?             @relation(fields: [eventId], references: [id])
  eventId     String?
  id          String             @id @default(cuid())
  kind        EnumInvitationKind
  recipient   User               @relation(name: "receivedInvitations", fields: [recipientId], references: [id])
  recipientId String
  sender      User               @relation(name: "sender", fields: [senderId], references: [id])
  senderId    String
  updatedAt   DateTime           @updatedAt
}

model Position {
  coordinates String
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  trip        Trip?    @relation(fields: [tripId], references: [id])
  tripId      String?
  updatedAt   DateTime @updatedAt
}

model Trip {
  createdAt DateTime   @default(now())
  day       DateTime   @unique
  id        String     @id @default(cuid())
  positions Position[]
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    String
}

enum EnumEventVisibility {
  public
  friends
  unlisted
}

enum EnumInvitationKind {
  friend_request
  event_attendance
}
