/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { User } from "../../user/base/User";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Category } from "../../category/base/Category";
import { Invitation } from "../../invitation/base/Invitation";
import { Place } from "../../place/base/Place";
import { EnumEventVisibility } from "./EnumEventVisibility";

@ObjectType()
class Event {
  @ApiProperty({
    required: false,
    type: () => [User],
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  attendees?: Array<User>;

  @ApiProperty({
    required: true,
    type: () => Category,
  })
  @ValidateNested()
  @Type(() => Category)
  category?: Category;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  date!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Invitation],
  })
  @ValidateNested()
  @Type(() => Invitation)
  @IsOptional()
  invitations?: Array<Invitation>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  limit!: number;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  owner?: User;

  @ApiProperty({
    required: false,
    type: () => Place,
  })
  @ValidateNested()
  @Type(() => Place)
  @IsOptional()
  place?: Place | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  title!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    enum: EnumEventVisibility,
  })
  @IsEnum(EnumEventVisibility)
  @Field(() => EnumEventVisibility, {
    nullable: true,
  })
  visibility?: "public" | "friends" | "unlisted";
}

export { Event as Event };
