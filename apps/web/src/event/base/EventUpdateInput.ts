/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { UserUpdateManyWithoutEventsInput } from "./UserUpdateManyWithoutEventsInput";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { CategoryWhereUniqueInput } from "../../category/base/CategoryWhereUniqueInput";
import { InvitationUpdateManyWithoutEventsInput } from "./InvitationUpdateManyWithoutEventsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { PlaceWhereUniqueInput } from "../../place/base/PlaceWhereUniqueInput";
import { EnumEventVisibility } from "./EnumEventVisibility";

@InputType()
class EventUpdateInput {
  @ApiProperty({
    required: false,
    type: () => UserUpdateManyWithoutEventsInput,
  })
  @ValidateNested()
  @Type(() => UserUpdateManyWithoutEventsInput)
  @IsOptional()
  @Field(() => UserUpdateManyWithoutEventsInput, {
    nullable: true,
  })
  attendees?: UserUpdateManyWithoutEventsInput;

  @ApiProperty({
    required: false,
    type: () => CategoryWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CategoryWhereUniqueInput)
  @IsOptional()
  @Field(() => CategoryWhereUniqueInput, {
    nullable: true,
  })
  category?: CategoryWhereUniqueInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  date?: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: () => InvitationUpdateManyWithoutEventsInput,
  })
  @ValidateNested()
  @Type(() => InvitationUpdateManyWithoutEventsInput)
  @IsOptional()
  @Field(() => InvitationUpdateManyWithoutEventsInput, {
    nullable: true,
  })
  invitations?: InvitationUpdateManyWithoutEventsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  limit?: number;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  owner?: UserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => PlaceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PlaceWhereUniqueInput)
  @IsOptional()
  @Field(() => PlaceWhereUniqueInput, {
    nullable: true,
  })
  place?: PlaceWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  title?: string;

  @ApiProperty({
    required: false,
    enum: EnumEventVisibility,
  })
  @IsEnum(EnumEventVisibility)
  @IsOptional()
  @Field(() => EnumEventVisibility, {
    nullable: true,
  })
  visibility?: "public" | "friends" | "unlisted";
}

export { EventUpdateInput as EventUpdateInput };
