/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePlaceArgs } from "./CreatePlaceArgs";
import { UpdatePlaceArgs } from "./UpdatePlaceArgs";
import { DeletePlaceArgs } from "./DeletePlaceArgs";
import { PlaceCountArgs } from "./PlaceCountArgs";
import { PlaceFindManyArgs } from "./PlaceFindManyArgs";
import { PlaceFindUniqueArgs } from "./PlaceFindUniqueArgs";
import { Place } from "./Place";
import { EventFindManyArgs } from "../../event/base/EventFindManyArgs";
import { Event } from "../../event/base/Event";
import { Category } from "../../category/base/Category";
import { PlaceService } from "../place.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Place)
export class PlaceResolverBase {
  constructor(
    protected readonly service: PlaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Place",
    action: "read",
    possession: "any",
  })
  async _placesMeta(
    @graphql.Args() args: PlaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Place])
  @nestAccessControl.UseRoles({
    resource: "Place",
    action: "read",
    possession: "any",
  })
  async places(@graphql.Args() args: PlaceFindManyArgs): Promise<Place[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Place, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Place",
    action: "read",
    possession: "own",
  })
  async place(
    @graphql.Args() args: PlaceFindUniqueArgs
  ): Promise<Place | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Place)
  @nestAccessControl.UseRoles({
    resource: "Place",
    action: "create",
    possession: "any",
  })
  async createPlace(@graphql.Args() args: CreatePlaceArgs): Promise<Place> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        category: {
          connect: args.data.category,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Place)
  @nestAccessControl.UseRoles({
    resource: "Place",
    action: "update",
    possession: "any",
  })
  async updatePlace(
    @graphql.Args() args: UpdatePlaceArgs
  ): Promise<Place | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          category: {
            connect: args.data.category,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Place)
  @nestAccessControl.UseRoles({
    resource: "Place",
    action: "delete",
    possession: "any",
  })
  async deletePlace(
    @graphql.Args() args: DeletePlaceArgs
  ): Promise<Place | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Event], { name: "events" })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async resolveFieldEvents(
    @graphql.Parent() parent: Place,
    @graphql.Args() args: EventFindManyArgs
  ): Promise<Event[]> {
    const results = await this.service.findEvents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async resolveFieldCategory(
    @graphql.Parent() parent: Place
  ): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
