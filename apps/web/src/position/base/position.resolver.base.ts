/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePositionArgs } from "./CreatePositionArgs";
import { UpdatePositionArgs } from "./UpdatePositionArgs";
import { DeletePositionArgs } from "./DeletePositionArgs";
import { PositionCountArgs } from "./PositionCountArgs";
import { PositionFindManyArgs } from "./PositionFindManyArgs";
import { PositionFindUniqueArgs } from "./PositionFindUniqueArgs";
import { Position } from "./Position";
import { Trip } from "../../trip/base/Trip";
import { PositionService } from "../position.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Position)
export class PositionResolverBase {
  constructor(
    protected readonly service: PositionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Position",
    action: "read",
    possession: "any",
  })
  async _positionsMeta(
    @graphql.Args() args: PositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Position])
  @nestAccessControl.UseRoles({
    resource: "Position",
    action: "read",
    possession: "any",
  })
  async positions(
    @graphql.Args() args: PositionFindManyArgs
  ): Promise<Position[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Position, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Position",
    action: "read",
    possession: "own",
  })
  async position(
    @graphql.Args() args: PositionFindUniqueArgs
  ): Promise<Position | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Position)
  @nestAccessControl.UseRoles({
    resource: "Position",
    action: "create",
    possession: "any",
  })
  async createPosition(
    @graphql.Args() args: CreatePositionArgs
  ): Promise<Position> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        trip: args.data.trip
          ? {
              connect: args.data.trip,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Position)
  @nestAccessControl.UseRoles({
    resource: "Position",
    action: "update",
    possession: "any",
  })
  async updatePosition(
    @graphql.Args() args: UpdatePositionArgs
  ): Promise<Position | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          trip: args.data.trip
            ? {
                connect: args.data.trip,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Position)
  @nestAccessControl.UseRoles({
    resource: "Position",
    action: "delete",
    possession: "any",
  })
  async deletePosition(
    @graphql.Args() args: DeletePositionArgs
  ): Promise<Position | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Trip, {
    nullable: true,
    name: "trip",
  })
  @nestAccessControl.UseRoles({
    resource: "Trip",
    action: "read",
    possession: "any",
  })
  async resolveFieldTrip(
    @graphql.Parent() parent: Position
  ): Promise<Trip | null> {
    const result = await this.service.getTrip(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
